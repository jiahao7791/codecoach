{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString(); //alert(dishId+\" \"+rating+\" \"+author+\" \"+comment);\n\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = promos => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: promos\n}); //postFeedback\n\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: feedback\n});\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  }; //alert(firstname+\" \"+lastname+\" \"+telnum+\" \"+email+\" \"+message);\n\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => {\n    response.json();\n    alert('Your feedback has been submitted.');\n  }).then(response => {\n    dispatch(addFeedback(response));\n  }).catch(error => {\n    console.log('post feedback', error.message);\n    alert('Your feedback could not be posted\\nError: ' + error.message);\n  });\n};","map":{"version":3,"sources":["/Users/jiahao/Documents/web-dev/personal-projects/codecoach/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","addFeedback","feedback","ADD_FEEDBACK","postFeedback","firstname","lastname","telnum","email","agree","contactType","newFeedback"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes'\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const addComment = ( comment ) =>({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n    const newComment = {\n        dishId: dishId,\n        rating: rating,\n        author: author,\n        comment: comment\n    };\n    newComment.date = new Date().toISOString();\n    //alert(dishId+\" \"+rating+\" \"+author+\" \"+comment);\n    \n    return fetch(baseUrl + 'comments', {\n        method: \"POST\",\n        body: JSON.stringify(newComment),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\n};\n\nexport const fetchDishes = () => (dispatch) => {\n\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishes')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n}\n\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = (errmess) => ({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n\n\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + 'comments')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + 'promotions')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\n\n\n\n\n\nexport const fetchLeaders = () => (dispatch) => {\n    \n    dispatch(leadersLoading());\n\n    return fetch(baseUrl + 'leaders')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(leaders => dispatch(addLeaders(leaders)))\n    .catch(error => dispatch(leadersFailed(error.message)));\n}\n\nexport const leadersLoading = () => ({\n    type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n    type: ActionTypes.LEADERS_FAILED,\n    payload: errmess\n});\n\nexport const addLeaders = (promos) => ({\n    type: ActionTypes.ADD_LEADERS,\n    payload: promos\n});\n\n\n\n//postFeedback\nexport const addFeedback = ( feedback ) =>({\n    type: ActionTypes.ADD_FEEDBACK,\n    payload: feedback\n\n});\n\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => (dispatch) => {\n\n    const newFeedback = {\n        firstname: firstname,\n        lastname: lastname,\n        telnum: telnum,\n        email: email,\n        agree: agree,\n        contactType: contactType,\n        message: message\n    };\n\n    //alert(firstname+\" \"+lastname+\" \"+telnum+\" \"+email+\" \"+message);\n    newFeedback.date = new Date().toISOString();\n\n    \n    return fetch(baseUrl + 'feedback', {\n        method: \"POST\",\n        body: JSON.stringify(newFeedback),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n      \n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => {response.json();    alert('Your feedback has been submitted.');})\n    .then( response => {dispatch(addFeedback(response)); })\n    .catch(error =>  { console.log('post feedback', error.message); alert('Your feedback could not be posted\\nError: '+error.message); });\n};"]},"metadata":{},"sourceType":"module"}